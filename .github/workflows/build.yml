name: Build Common Library

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Allows manual triggering

jobs:
  build:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v1.1
    
    - name: Setup NuGet
      uses: NuGet/setup-nuget@v1
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: |
          6.0.x
          8.0.x
    
    - name: Install .NET Framework Developer Pack
      run: |
        choco install netfx-4.8-devpack -y
      shell: pwsh
    
    - name: List directory structure
      run: |
        dir
        dir -Recurse -Depth 2
      shell: pwsh
    
    - name: Display project file content
      run: |
        if (Test-Path Common.csproj) {
          echo "Common.csproj content:"
          Get-Content Common.csproj
        } else {
          echo "Common.csproj not found!"
        }
      shell: pwsh
    
    - name: Install Newtonsoft.Json package
      run: |
        dotnet add package Newtonsoft.Json --version 13.0.3
      shell: pwsh
    
    - name: Restore NuGet packages
      run: |
        nuget restore Common.csproj
      shell: pwsh
      continue-on-error: true
    
    - name: Build with MSBuild (All Frameworks)
      id: build
      run: |
        msbuild Common.csproj /p:Configuration=Release /p:Platform="Any CPU" /verbosity:detailed
        echo "build_exit_code=$LASTEXITCODE" >> $env:GITHUB_OUTPUT
      shell: pwsh
      continue-on-error: true
    
    - name: Check build status
      if: steps.build.outputs.build_exit_code != '0'
      run: |
        echo "::error::Build failed with exit code ${{ steps.build.outputs.build_exit_code }}"
        exit 1
      shell: pwsh
    
    - name: Find all build outputs
      run: |
        echo "All build outputs:"
        Get-ChildItem -Path . -Include *.dll -Recurse | Select-Object FullName
      shell: pwsh
    
    - name: Create output directories and copy files
      run: |
        mkdir -p output
        
        # Find all DLL files and copy them to output
        $dllFiles = Get-ChildItem -Path . -Include *.dll -Recurse | Where-Object { $_.FullName -notlike "*\\packages\\*" }
        if ($dllFiles.Count -gt 0) {
          foreach ($file in $dllFiles) {
            $destPath = Join-Path "output" $file.Name
            Copy-Item -Path $file.FullName -Destination $destPath -Force
            echo "Copied DLL: $($file.FullName) to $destPath"
          }
        } else {
          echo "No DLL files found to copy!"
          exit 1
        }
      shell: pwsh
    
    - name: List output directory
      run: |
        echo "Output directory contents:"
        if (Test-Path output) {
          Get-ChildItem -Path output -Recurse
        } else {
          echo "Output directory not found!"
          exit 1
        }
      shell: pwsh
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: Common-build-outputs
        path: output/
        if-no-files-found: error
