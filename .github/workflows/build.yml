name: Build Common Library

on:
  push:
    branches: [ main, test ]
  pull_request:
    branches: [ main, test ]
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v1.1

    - name: Setup NuGet
      uses: NuGet/setup-nuget@v1

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 6.0.x

    - name: Install .NET Framework Developer Pack
      run: |
        choco install netfx-4.8-devpack -y
      shell: pwsh

    - name: List directory structure
      run: |
        dir
        dir -Recurse -Depth 2
      shell: pwsh

    - name: Create packages.config
      run: |
        $content = '<?xml version="1.0" encoding="utf-8"?>
        <packages>
          <package id="Newtonsoft.Json" version="13.0.3" targetFramework="net48" />
          <package id="Microsoft.Extensions.Configuration.Json" version="6.0.0" targetFramework="net48" />
          <package id="System.Net.Http" version="4.3.4" targetFramework="net48" />
          <package id="System.Text.Json" version="6.0.0" targetFramework="net48" />
          <package id="Costura.Fody" version="5.7.0" targetFramework="net48" developmentDependency="true" />
          <package id="Fody" version="6.6.4" targetFramework="net48" developmentDependency="true" />
        </packages>'
        Set-Content -Path packages.config -Value $content
      shell: pwsh

    - name: Install NuGet packages
      run: |
        nuget install Newtonsoft.Json -Version 13.0.3
        nuget install Microsoft.Extensions.Configuration.Json -Version 6.0.0
        nuget install System.Net.Http -Version 4.3.4
        nuget install System.Text.Json -Version 6.0.0
        nuget install Costura.Fody -Version 5.7.0
        nuget install Fody -Version 6.6.4
      shell: pwsh

    - name: Restore dependencies with dotnet
      run: |
        dotnet restore Common.csproj
      shell: pwsh

    - name: Build with dotnet (.NET Framework 4.8 only)
      run: |
        dotnet build Common.csproj --configuration Release --framework net48
        echo "Build exit code: $LASTEXITCODE"
      shell: pwsh

    - name: Search for build outputs
      run: |
        echo "Searching for DLL files:"
        Get-ChildItem -Path . -Filter *.dll -Recurse | Select-Object FullName
      shell: pwsh

    - name: Create output directories and copy files
      run: |
        mkdir -p output

        # Find and copy any DLL files
        $dllFiles = Get-ChildItem -Path . -Filter *.dll -Recurse | Where-Object { $_.FullName -notlike "*\\packages\\*" -and $_.FullName -notlike "*\\obj\\*" }
        if ($dllFiles.Count -gt 0) {
          foreach ($file in $dllFiles) {
            $destPath = Join-Path "output" $file.Name
            Copy-Item -Path $file.FullName -Destination $destPath -Force
            echo "Copied $($file.FullName) to $destPath"
          }
        } else {
          echo "::warning::No DLL files found to copy!"
        }
      shell: pwsh

    - name: List output directory
      run: |
        echo "Output directory contents:"
        if (Test-Path output) {
          Get-ChildItem -Path output -Recurse
        } else {
          echo "Output directory not found!"
        }
      shell: pwsh

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: Common-build-outputs
        path: output/
        if-no-files-found: warn
